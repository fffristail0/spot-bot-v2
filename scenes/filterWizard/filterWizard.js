// scenes/filterWizard/filterWizard.js
const { Scenes, Markup } = require('telegraf');
const messages = require('../../config/messages');
const { defaultFilter, getUserFilter, saveUserFilter } = require('../../services/filter');
const cb = require('../../utils/callback');
const listCommand = require('../../commands/list');

function t(path, fallback) {
  try {
    return path.split('.').reduce((a, k) => (a && a[k] != null ? a[k] : undefined), messages) ?? fallback;
  } catch (_) {
    return fallback;
  }
}

function kbOwnership() {
  const labelAll = t('filters.ownershipOptions.all', '–í—Å–µ');
  const labelOwner = t('filters.ownershipOptions.owner', '–ú–æ–∏');
  const labelShared = t('filters.ownershipOptions.shared', '–ú–Ω–µ —Ä–∞—Å—à–∞—Ä–∏–ª–∏');
  return Markup.inlineKeyboard([
    [
      Markup.button.callback(labelAll, cb.make('fw', 'own:all')),
      Markup.button.callback(labelOwner, cb.make('fw', 'own:owner')),
      Markup.button.callback(labelShared, cb.make('fw', 'own:shared'))
    ]
  ]);
}

function kbGps() {
  const any = t('filters.hasGpsOptions.any', '–õ—é–±—ã–µ');
  const yes = t('filters.hasGpsOptions.yes', '–¢–æ–ª—å–∫–æ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏');
  const no = t('filters.hasGpsOptions.no', '–¢–æ–ª—å–∫–æ –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç');
  return Markup.inlineKeyboard([
    [Markup.button.callback(any, cb.make('fw', 'gps:any'))],
    [
      Markup.button.callback(yes, cb.make('fw', 'gps:yes')),
      Markup.button.callback(no, cb.make('fw', 'gps:no'))
    ]
  ]);
}

function kbPeriod() {
  const all = t('filters.periodOptions.all', '–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è');
  const d7 = t('filters.periodOptions.d7', '7 –¥–Ω–µ–π');
  const d30 = t('filters.periodOptions.d30', '30 –¥–Ω–µ–π');
  const d90 = t('filters.periodOptions.d90', '90 –¥–Ω–µ–π');
  return Markup.inlineKeyboard([
    [Markup.button.callback(all, cb.make('fw', 'per:all'))],
    [
      Markup.button.callback(d7, cb.make('fw', 'per:7')),
      Markup.button.callback(d30, cb.make('fw', 'per:30')),
      Markup.button.callback(d90, cb.make('fw', 'per:90'))
    ]
  ]);
}

function kbSkip() {
  const skip = t('filters.skip', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å');
  return Markup.inlineKeyboard([[Markup.button.callback(skip, cb.make('fw', 'text:skip'))]]);
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä: —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ ¬´–º–∞—Å—Ç–µ—Ä¬ª-—Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–µ
async function renderStep(ctx, text, keyboard) {
  const chatId = ctx.chat.id;
  const msgId = ctx.wizard.state.msgId;
  const replyMarkup = keyboard?.reply_markup || keyboard; // –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Markup.inlineKeyboard
  try {
    if (msgId) {
      await ctx.telegram.editMessageText(chatId, msgId, undefined, text, replyMarkup ? { reply_markup: replyMarkup } : undefined);
      return msgId;
    }
  } catch (_) {
    // –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (—É–¥–∞–ª–µ–Ω–æ/—Å—Ç–∞—Ä–æ–µ/–∏–Ω–æ–µ) ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ
  }
  const sent = await ctx.reply(text, replyMarkup ? { reply_markup: replyMarkup } : undefined);
  ctx.wizard.state.msgId = sent.message_id;
  return sent.message_id;
}

async function deleteWizardMessage(ctx) {
  const msgId = ctx.wizard.state.msgId;
  if (!msgId) return;
  try { await ctx.deleteMessage(msgId); } catch (_) {}
  ctx.wizard.state.msgId = undefined;
}

const filterWizard = new Scenes.WizardScene(
  'filterWizard',

  // Step 0: —Å—Ç–∞—Ä—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≤–ª–∞–¥–µ–Ω–∏—è
  async (ctx) => {
    if (ctx.message?.text === '/cancel') {
      await ctx.reply(t('cancel.success', 'üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞.'));
      return ctx.scene.leave();
    }
    try {
      const current = await getUserFilter(String(ctx.from.id));
      ctx.wizard.state.filter = { ...current };
    } catch {
      ctx.wizard.state.filter = defaultFilter();
    }
    const title = t('filters.title', '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞');
    const own = t('filters.ownership', '–ö–∞–∫–∏–µ —Å–ø–æ—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å?');
    await renderStep(ctx, `${title}\n\n${own}`, kbOwnership());
    return ctx.wizard.next();
  },

  // Step 1: ownership -> gps
  async (ctx) => {
    if (ctx.message?.text === '/cancel') {
      await deleteWizardMessage(ctx);
      await ctx.reply(t('cancel.success', 'üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞.'));
      return ctx.scene.leave();
    }
    if (ctx.callbackQuery?.data) {
      const parsed = cb.parse(ctx.callbackQuery.data);
      if (parsed?.action === 'fw') {
        const [key, val] = String(parsed.payload || '').split(':');
        if (key === 'own' && ['all', 'owner', 'shared'].includes(val)) {
          ctx.wizard.state.filter.ownership = val;
          await ctx.answerCbQuery().catch(() => {});
          const gps = t('filters.hasGps', '–§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º');
          await renderStep(ctx, gps, kbGps());
          return ctx.wizard.next();
        }
      }
    }
  },

  // Step 2: gps -> period
  async (ctx) => {
    if (ctx.message?.text === '/cancel') {
      await deleteWizardMessage(ctx);
      await ctx.reply(t('cancel.success', 'üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞.'));
      return ctx.scene.leave();
    }
    if (ctx.callbackQuery?.data) {
      const parsed = cb.parse(ctx.callbackQuery.data);
      if (parsed?.action === 'fw') {
        const [key, val] = String(parsed.payload || '').split(':');
        if (key === 'gps' && ['any', 'yes', 'no'].includes(val)) {
          ctx.wizard.state.filter.hasGps = val;
          await ctx.answerCbQuery().catch(() => {});
          const per = t('filters.period', '–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥?');
          await renderStep(ctx, per, kbPeriod());
          return ctx.wizard.next();
        }
      }
    }
  },

  // Step 3: period -> text
  async (ctx) => {
    if (ctx.message?.text === '/cancel') {
      await deleteWizardMessage(ctx);
      await ctx.reply(t('cancel.success', 'üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞.'));
      return ctx.scene.leave();
    }
    if (ctx.callbackQuery?.data) {
      const parsed = cb.parse(ctx.callbackQuery.data);
      if (parsed?.action === 'fw') {
        const [key, val] = String(parsed.payload || '').split(':');
        if (key === 'per') {
          const days = val === 'all' ? null : Number(val);
          ctx.wizard.state.filter.periodDays = days;
          await ctx.answerCbQuery().catch(() => {});
          const textQ = t('filters.text', '–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.');
          await renderStep(ctx, textQ, kbSkip());
          return ctx.wizard.next();
        }
      }
    }
  },

  // Step 4: text -> save
  async (ctx) => {
    if (ctx.message?.text === '/cancel') {
      await deleteWizardMessage(ctx);
      await ctx.reply(t('cancel.success', 'üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞.'));
      return ctx.scene.leave();
    }

    // –æ–±—Ä–∞–±–æ—Ç–∫–∞ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    if (ctx.callbackQuery?.data) {
      const parsed = cb.parse(ctx.callbackQuery.data);
      if (parsed?.action === 'fw' && parsed.payload === 'text:skip') {
        ctx.wizard.state.filter.text = null;
        await ctx.answerCbQuery().catch(() => {});
      } else {
        return; // –∂–¥—ë–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
      }
    }

    // –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (ctx.message?.text && ctx.message.text !== '/cancel') {
      const text = String(ctx.message.text || '').trim();
      ctx.wizard.state.filter.text = text || null;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å—Ü–µ–Ω—É
    const f = ctx.wizard.state.filter || defaultFilter();
    try {
      await renderStep(ctx, t('filters.saved', '‚úÖ –§–∏–ª—å—Ç—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ü–æ–∫–∞–∑–∞–Ω—ã —Å–≤–µ–∂–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.'));
    } catch (_) {}
    await saveUserFilter(String(ctx.from.id), f).catch(() => {});

    // –£–¥–∞–ª—è–µ–º –º–∞—Å—Ç–µ—Ä-—Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã, —á—Ç–æ–±—ã –Ω–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å ¬´—Ö–≤–æ—Å—Ç¬ª
    await deleteWizardMessage(ctx);

    await ctx.scene.leave();
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–∏—Å—Ç–∏–Ω–≥–∞ –ø–æ –Ω–æ–≤—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º
    return listCommand(ctx);
  }
);

module.exports = filterWizard;